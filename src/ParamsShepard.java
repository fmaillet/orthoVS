
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_ESCAPE;
import static java.awt.event.KeyEvent.VK_SPACE;
import java.awt.event.KeyListener;
import java.awt.geom.GeneralPath;
import java.awt.geom.PathIterator;
import java.awt.image.BufferedImage;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.util.Random;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fred
 */
public class ParamsShepard extends javax.swing.JPanel {

    /**
     * Creates new form ParamsSaccade
     */
    public ParamsShepard(JLabel icone) {
        initComponents();
        if (OrthoVS.user.nom != null) {
            jGridSize.setEnabled (false) ;
            jDurée.setEnabled (true) ;
            jDurée.setValue (2) ;
            //jLabelGrid.setEnabled (true) ;
            //jGridSize.setSelectedIndex(1);
        }
        else {
            jGridSize.setEnabled (false) ;
            //jLabelGrid.setEnabled (false) ;
            jGridSize.setSelectedIndex(1);
            jDurée.setEnabled (false) ;
            jDurée.setValue (1) ;
        }
        addComponentListener ( new ComponentAdapter () {
            public void componentShown ( ComponentEvent e )
            {
                icone.setVisible(true);
            }

            public void componentHidden ( ComponentEvent e )
            {
                icone.setVisible(false);
            }
        } );
            
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTitle = new javax.swing.JLabel();
        jDurée = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        jManualStart = new javax.swing.JButton();
        jAutoStar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jGridSize = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabelGrid = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jDifficulty = new javax.swing.JSpinner();
        jLabel13 = new javax.swing.JLabel();
        jManuel = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(255, 255, 255));
        setDoubleBuffered(false);
        setEnabled(false);
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(431, 513));

        jTitle.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jTitle.setForeground(new java.awt.Color(102, 102, 102));
        jTitle.setText("Rotations :");

        jDurée.setModel(new javax.swing.SpinnerNumberModel(2, 1, 15, 1));
        jDurée.setToolTipText("Durée de la série (en mn)");
        jDurée.setOpaque(false);
        jDurée.setPreferredSize(new java.awt.Dimension(35, 20));
        jDurée.setValue(1);

        jManualStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jManualStart.setText("Démarrer");
        jManualStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jManualStartActionPerformed(evt);
            }
        });

        jAutoStar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jAutoStar.setText("Progression auto");
        jAutoStar.setEnabled(false);
        jAutoStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoStarActionPerformed(evt);
            }
        });

        jGridSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 3 x 3", " 4 x 4", " 5 x 5" }));
        jGridSize.setSelectedIndex(2);
        jGridSize.setToolTipText("Taille de la grille");
        jGridSize.setEnabled(false);

        jLabel12.setText("(1 à 15 minutes)");
        jLabel12.setEnabled(false);

        jLabelGrid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelGrid.setText("Taille Grille :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Durée de la série :");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Difficulté :");

        jDifficulty.setModel(new javax.swing.SpinnerNumberModel(1, 1, 8, 1));
        jDifficulty.setOpaque(false);

        jLabel13.setText("(1: facile ... 8: difficile)");
        jLabel13.setEnabled(false);

        jManuel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jManuel.setText("Laisser les mauvaises réponses affichées (appuyer sur Espace)");
        jManuel.setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jManuel))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(jTitle))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jManualStart)
                                .addGap(26, 26, 26)
                                .addComponent(jAutoStar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelGrid)
                                            .addComponent(jLabel5))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(32, 32, 32)
                                        .addComponent(jDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel13)))
                                .addGap(0, 78, Short.MAX_VALUE))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTitle)
                .addGap(36, 36, 36)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGrid))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(24, 24, 24)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jDifficulty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addComponent(jManuel)
                .addGap(6, 6, 6)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jManualStart)
                    .addComponent(jAutoStar))
                .addContainerGap(170, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jManualStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jManualStartActionPerformed
        int size = (Integer) jGridSize.getSelectedIndex() +3 ;
        //int level   = (Integer) jLevel.getValue() ;
        int durée =  (Integer) jDurée.getValue() ;
        //on lance l'activité
        LaunchShepard l = new LaunchShepard (this, size, durée, (Integer) jDifficulty.getValue(), jManuel.isSelected()) ;
    }//GEN-LAST:event_jManualStartActionPerformed

    private void jAutoStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoStarActionPerformed
        /*int n = (Integer) spinNbCycles.getValue();
        int sp   = Integer.parseInt((String) jSpeed.getSelectedItem());
        //on lance l'activité
        LaunchFixation test = new LaunchFixation ( n, sp, jManuel.isSelected(), true ) ;
        test.start () ;*/
    }//GEN-LAST:event_jAutoStarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAutoStar;
    static javax.swing.JSpinner jDifficulty;
    public static javax.swing.JSpinner jDurée;
    private javax.swing.JComboBox<String> jGridSize;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JButton jManualStart;
    private javax.swing.JCheckBox jManuel;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public static javax.swing.JLabel jTitle;
    // End of variables declaration//GEN-END:variables
}

class LaunchShepard extends Thread implements ActionListener, KeyListener {
    
    Thread t ;    
    JPanel p ;
    int size, durée, level, difficulty ;
    JProgressBar progressBar ;
    JButton jTime, ok, nok ;
    JLabel jScore, jMessageEspace, jClipart ;
    
    DoubleCadreShepard grilleL, grilleR ;
    Random rand ;
    boolean pareils, manuel, nextGrid, escPressed, spacePressed ;
    Score score ;
    static SoundClips snd ;
    long tempsDebut ;
    
    ChartPanel chartPanelTEMP ;
    XYSeriesCollection xySeriesCollection ;
    XYSeries serieBAD ;
    
    LaunchShepard (JPanel p, int size, int durée, int difficulty, boolean manuel) {
        this.p = p ;
        this.size = size ;
        this.durée = durée * 60 ;
        this.level = 2 ; //pas sûr de savoir d'où ça sort ça
        this.difficulty = difficulty ;
        this.manuel = manuel ;
        rand = new Random () ;
        escPressed = false ;
               
        //On cache les menus
        OrthoVS.fen.enableMenuBar(false);
        OrthoVS.fen.jPatient.setVisible (false) ;
        OrthoVS.fen.chartPanelOK.setVisible(false);
        OrthoVS.fen.chartPanelBAD.setVisible(false);
        //ProgressBar
        progressBar = new JProgressBar(0, this.durée);
        progressBar.setValue(0);
        OrthoVS.fen.getContentPane().add (progressBar) ;
        /*Border border = BorderFactory.createTitledBorder("Reste...");
        progressBar.setBorder(border);*/
        progressBar.setOpaque(false);
        progressBar.setForeground(Color.PINK);
        //Icon time
        jTime = new JButton ( UserInfo.iconTime ) ;
        jTime.setBorderPainted(false);
        jTime.setContentAreaFilled(false);
        OrthoVS.fen.getContentPane ().add (jTime) ;
        jTime.setVisible(true);
        //Clipart
        //Icon détective
        jClipart = new JLabel ( UserInfo.iconShepard ) ;
        //jClipart.setBorderPainted(false);
        //jClipart.setContentAreaFilled(false);
        
        jClipart.setVisible(true);
        
        //On affiche les deux cadres
        grilleL = new DoubleCadreShepard (size) ;
        grilleL.setBounds((OrthoVS.fen.getContentPane().getWidth()/2-(size*50))-2, (OrthoVS.fen.getContentPane().getHeight()-(size*50))/2, size*50, size*50);
        OrthoVS.fen.getContentPane().add (grilleL) ;
        grilleL.validate () ;

        grilleR = new DoubleCadreShepard (size) ;
        grilleR.setBounds((OrthoVS.fen.getContentPane().getWidth()/2)+2, (OrthoVS.fen.getContentPane().getHeight()-(size*50))/2, size*50, size*50);
        OrthoVS.fen.getContentPane().add (grilleR) ;
        grilleR.validate () ;
        
        //Les deux boutons
        ok = new JButton ("Pareil") ;
        ok.setBackground(Color.GREEN); ok.setFont(new java.awt.Font("Tahoma", 1, 18));
        ok.setBounds(grilleL.getX(), grilleL.getY() + grilleL.getHeight() + 10, grilleL.getWidth(), 35);
        //ok.setBorder(BorderFactory.createRaisedBevelBorder());
        ok.setVisible(true); ok.addActionListener(this);
        OrthoVS.fen.getContentPane().add (ok) ;
        nok = new JButton ("Pas Pareil") ;
        nok.setBackground(Color.RED.brighter()); nok.setFont(new java.awt.Font("Tahoma", 1, 18));
        nok.setBounds(grilleR.getX(), grilleR.getY() + grilleR.getHeight() + 10, grilleR.getWidth(), 35);
        nok.setVisible(true); nok.addActionListener(this);
        OrthoVS.fen.getContentPane().add (nok) ;
                
        //Graphique
        xySeriesCollection = new XYSeriesCollection();
        JFreeChart chartBAD = ChartFactory.createXYLineChart("", "", "", xySeriesCollection,
            PlotOrientation.VERTICAL, false, false, false);
        
        chartBAD.removeLegend();
        chartPanelTEMP = new ChartPanel( chartBAD ) ;
        OrthoVS.fen.getContentPane ().add (chartPanelTEMP) ;
        XYPlot plot = (XYPlot) chartBAD.getPlot() ;
        XYLineAndShapeRenderer xyLineAndShapeRenderer = new XYLineAndShapeRenderer() ;
        xyLineAndShapeRenderer.setSeriesPaint(0, Color.YELLOW) ;
        plot.setRenderer(xyLineAndShapeRenderer);
        ValueAxis domain = plot.getDomainAxis() ; domain.setVisible(false);
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        chartPanelTEMP.setPopupMenu(null);
        chartPanelTEMP.setDomainZoomable(false);
        chartPanelTEMP.setRangeZoomable(false);
        chartBAD.setBackgroundPaint(new Color(0,204 , 204));
        
        chartPanelTEMP.setVisible(true);
        //On initialise le tracé
        serieBAD = new XYSeries("% inversions");
        xySeriesCollection.addSeries(serieBAD);
        //Le score
        jScore = new JLabel ("") ;
        OrthoVS.fen.getContentPane ().add (jScore) ;
        jScore.setFont(new java.awt.Font("Tahoma", 1, 16));
        jScore.setForeground(Color.GRAY);
        //jScore.setOpaque(false);
        jScore.setVisible(true);
        //Message pour appuyer sur la barre d'espace
        jMessageEspace = new JLabel ("Appuyez sur la barre d'espace pour continuer") ;
        OrthoVS.fen.getContentPane ().add (jMessageEspace) ;
        jMessageEspace.setBounds(ok.getX()+ok.getWidth()/2, ok.getY()+10, 300, 40);
        jMessageEspace.setVisible(false);
        //Le dessin sympa
        OrthoVS.fen.getContentPane ().add (jClipart) ;
        //On écoute le clavier
        OrthoVS.fen.addKeyListener (this) ;
        //On lance le thread
        t = new Thread (this, "launchFeature") ;
        t.start ( ) ;
    }
    
    @Override
    public void run () {
        //On prépare les données
        LinkedList<Score> results = new LinkedList<Score> () ;
        
        //On cache ce qu'il faut cacher
        p.setVisible (false);
        
        //La progressBar
        progressBar.setBounds(grilleL.getX(), grilleL.getY()-50, grilleR.getWidth() + grilleL.getWidth() + 4, 20);
        jTime.setBounds(grilleL.getX() - 35 , grilleL.getY()-56, 32, 32);
        chartPanelTEMP.setBounds(grilleR.getX() + grilleR.getWidth() + 30, nok.getY() + - 80, 250, 120);
        jScore.setBounds(grilleR.getX() + grilleR.getWidth() + 95 , grilleR.getY() + grilleR.getHeight() - 100 , 200, 20);
        jClipart.setBounds(grilleR.getX() + grilleR.getWidth() + 65, nok.getY() - 390, 200, 278);
        //OrthoVS.fen.chartPanelBAD.setOpaque(false);
        //On redessine
        OrthoVS.fen.repaint () ;
        
        //On boucle sur la série
        boolean notFin = true ;
        long tempsDebut = System.currentTimeMillis();
        int currentLevel = this.level - 1 ;
        double scoreCumulé = 0 ;
        long tpsCumulé = 0 ;
        double nCycle = 0 ;
        
        //On lance le timer
        DrawTimer timerThrd = new DrawTimer (progressBar, tempsDebut, this.durée) ;
        
        //On démarre
        do {
            OrthoVS.fen.requestFocus();
            score = new Score () ;
            //On initialise les grilles
            if ( currentLevel < (size * (size - 1) ) ) currentLevel++ ;
            if (currentLevel == 1) currentLevel++ ;
            randomInit(this.difficulty );
            score.presentation = currentLevel ;
            spacePressed = false ;
            escPressed = false ;
            //On attend la saisie de l'utilisateur
            do {
                try { sleep ( 150 ) ;} catch (Exception e) {}
                if (escPressed) break ;
            } while (! nextGrid) ;
            
            //Si appui sur ESC
            if (escPressed) break ;

            //On sauve le score
            results.add(score); 
            
            //C'est la fin ?
            float seconds = (System.currentTimeMillis() - tempsDebut) / 1000F;
            //progressBar.setValue((int) seconds);
            if (seconds > durée) notFin = false ;
            nCycle++ ;
            //On calcule le score et la vitesse
            tpsCumulé += score.tr_f ;
            if (score.reponse == 1) scoreCumulé +=score.presentation ;
            
            //On met à jour le graphique et le label score
            if (scoreCumulé != 0.0) {
                serieBAD.add (nCycle, 60000 / (tpsCumulé/scoreCumulé) ) ;
                //System.out.print (score.level + ",") ;
                //System.out.println ((System.currentTimeMillis() - tempsDebut) / scoreCumulé) ;
                jScore.setText( String.format("%.1f", 60000 / (tpsCumulé/scoreCumulé)) + " items/mn" );
            }
            else {
                serieBAD.add (nCycle, 0 ) ;
                jScore.setText( String.format("%.1f", 0.0) + " items/mn" );
            }
            //Soit on attend espace soit on laisse un peu la réponse
            if (score.reponse == 0 && this.manuel) {
                ok.setVisible(false); nok.setVisible(false);
                jMessageEspace.setVisible(true);
                OrthoVS.fen.requestFocus();
                do {
                    try { sleep ( 150 ) ;} catch (Exception e) {}
                } while (! spacePressed) ;
                jMessageEspace.setVisible(false);
                ok.setVisible(true); nok.setVisible(true);
            }
            else { try { sleep ( 200 ) ;} catch (Exception e) {} }
        } while (notFin) ;
        
        //On a fini..
        if (results.size() > 0) {
            Session session = new Session () ;
            //ajouter la date
            session.date = new Date () ;
            //affecter les résultats
            session.gridSize = this.size ;
            session.results = results ;
            //On ajoute à l'ensemble des résultats
            UserInfo.resultatsShepard.add(session);
            UserInfo.modifiedResultatsShepard = true ;
        }
        
        //On réaffiche les paramètres
        OrthoVS.fen.getContentPane().remove(grilleL);
        OrthoVS.fen.getContentPane().remove(grilleR);
        OrthoVS.fen.getContentPane().remove(ok);
        OrthoVS.fen.getContentPane().remove(nok);
        OrthoVS.fen.getContentPane().remove(progressBar);
        OrthoVS.fen.getContentPane().remove(jTime);
        OrthoVS.fen.getContentPane().remove(jClipart);
        OrthoVS.fen.getContentPane().remove(jScore);
        OrthoVS.fen.getContentPane().remove(chartPanelTEMP);
        OrthoVS.fen.enableMenuBar(true);
        OrthoVS.fen.jPatient.setVisible (true) ;
        OrthoVS.fen.chartPanelOK.setVisible(true);
        OrthoVS.fen.chartPanelBAD.setVisible(true);
        OrthoVS.fen.computeChartsShepard(true);
        p.setVisible (true) ;
        OrthoVS.fen.repaint () ;
    }
    
    //Générer des figures Shepard
    void randomInit (int difficulty) {
        //Ne pas effacer
        nextGrid = false ;
        int max = 5 ; int min = 1 ;
        //double theta, radius ;
        grilleL.reset(); grilleR.reset();
        grilleL.pareils = pareils = rand.nextBoolean() ;
        if (pareils) score.level = 1 ; else score.level = 0 ;
        
        //Shepard-Metzler items : choix du dossier
        switch (difficulty) {
            case 1 : max = 4 ; min = 1 ; break ;
            case 2 : max = 6 ; min = 3 ; break ;
            case 3 : max = 8 ; min = 5 ; break ;
            case 4 : max = 10 ; min = 7 ; break ;
            case 5 : max = 15 ; min = 10 ; break ;
            case 6 : max = 20 ; min = 12 ; break ;
            case 7 : max = 25 ; min = 15 ; break ;
            case 8 : max = 30 ; min = 20 ; break ;
            default : max = 30 ; min = 1 ;
        }
        
        int s = rand.nextInt((max - min) + 1) + min;
        //Shepard-Metzler items : choix de l'image
        max  = 5 ; min = 1 ;
        int ss = rand.nextInt((max - min) + 1) + min;
        boolean s1 = rand.nextBoolean() ;
        grilleL.img = OrthoVS.fen.getShepardImage (s, s1, ss) ;
        
        //Grille de droite:
        if (! pareils) s1 = ! s1 ;
        else {
            int old_ss = ss ;
            ss = rand.nextInt((max - min) + 1) + min;
            if (difficulty > 1 && old_ss == ss)
                ss = (old_ss+1)%5 + 1 ;
        }
        grilleR.img = OrthoVS.fen.getShepardImage (s, s1, ss) ;  
        
        
        
        grilleL.repaint () ; grilleR.repaint () ;
        tempsDebut = System.currentTimeMillis();
    }
    
    
    @Override
    public void actionPerformed(ActionEvent e) {
        JButton b = (JButton) e.getSource() ;
        if ( (b == ok && pareils) || (b == nok && ! pareils) ) {
            grilleL.setBackground(Color.GREEN);
            grilleR.setBackground(Color.GREEN);
            score.reponse = 1 ;
            snd = new SoundClips (4) ; //GOOD
            snd.start () ;
        }
        else { 
            grilleL.setBackground(Color.RED.brighter());
            grilleR.setBackground(Color.RED);
            score.reponse = 0 ;
            snd = new SoundClips (5) ; //False
            snd.start () ;
        }
        this.score.tr_f = System.currentTimeMillis() - tempsDebut ;
        nextGrid = true ;
    }

    @Override
    public void keyTyped(KeyEvent e) {
        
    }

    @Override
    public void keyPressed(KeyEvent e) {
        score.tr_f = System.currentTimeMillis() - tempsDebut ;
        int code = e.getKeyCode () ;
        if (code == VK_ESCAPE) {    //Sortir de la boucle de test, revenir à l'écran de paramétrage
            escPressed = true ;
        }
        else if (code == VK_SPACE) {
            spacePressed = true ;
            //System.out.println ("Space pressed") ;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        
    }

    
}

class DoubleCadreShepard extends JPanel {
    
    int size ;
    boolean pareils = false ;
    Image img ;
    
    DoubleCadreShepard ( int size ) {
        this.size = size ;

        setBackground(Color.CYAN);
        //setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        GridLayout g = new GridLayout(size, size) ;
        g.setHgap(6); g.setVgap(6);
        setLayout( g );
        setBorder(new EmptyBorder(10, 10, 10, 10) );
        
        //On affiche
        setVisible (true) ;
    }
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        int x = this.getWidth()/2 -150/2 ;
        int y = this.getHeight()/2 -150/2 ;
        
        g.drawImage(img, x , y, this) ;
    }
    
    public static BufferedImage resize(final Image image, final int width, final int height){
        assert image != null;
        final BufferedImage bi = new BufferedImage(width, height, image instanceof BufferedImage ? ((BufferedImage)image).getType() : BufferedImage.TYPE_INT_ARGB);
        final Graphics2D g = bi.createGraphics();
        g.drawImage(image, 0, 0, width, height, null);
        g.dispose();
        return bi;
    }
    
    void reset () {
        setBackground(Color.CYAN);
        
    }
}

class DrawTimer extends Thread {
    Thread t ;
    JProgressBar progressBar ;
    long tempsDebut ;
    int durée ;
    
    DrawTimer (JProgressBar pB, long tD, int durée) {
        this.progressBar = pB ;
        this.tempsDebut = tD ;
        this.durée = durée ;
        //On lance le thread
        t = new Thread (this, "drawTimer") ;
        t.start ( ) ;
    }
    @Override
    public void run () {
        float seconds = 0 ;
        do {
            seconds = (System.currentTimeMillis() - tempsDebut) / 1000F;
            progressBar.setValue((int) seconds);
            progressBar.repaint () ;
            try { sleep ( 100 ) ;} catch (Exception e) {}
        } while (seconds < durée ) ;
    }
}