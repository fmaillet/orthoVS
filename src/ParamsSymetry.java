
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_ESCAPE;
import java.awt.event.KeyListener;
import java.awt.image.MemoryImageSource;
import static java.lang.Thread.sleep;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fred
 */
public class ParamsSymetry extends javax.swing.JPanel {

    /**
     * Creates new form ParamsSaccade
     */
    JLabel icone ;
    public ParamsSymetry(JLabel icone) {
        initComponents();
        this.icone = icone ;
        if (OrthoVS.user.nom != null) {
            jGridSize.setEnabled (true) ;
            jDurée.setEnabled (true) ;
            //jDurée.setValue (1) ;
            jGridSize.setSelectedIndex(1);
            //jLabelGrid.setEnabled (true) ;
            //jGridSize.setSelectedIndex(1);
        }
        else {
            jGridSize.setSelectedIndex(1);
            jGridSize.setEnabled (false) ;
            //jLabelGrid.setEnabled (false) ;
            jGridSize.setSelectedIndex(1);
            jDurée.setEnabled (false) ;
            jDurée.setValue (1) ;
        }
        addComponentListener ( new ComponentAdapter () {
            public void componentShown ( ComponentEvent e )
            {
                icone.setVisible(true);
            }

            public void componentHidden ( ComponentEvent e )
            {
                icone.setVisible(false);
            }
        } );    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTitle = new javax.swing.JLabel();
        jDurée = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        jManualStart = new javax.swing.JButton();
        jAutoStar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jPresent = new javax.swing.JSpinner();
        jGridSize = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabelGrid = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(431, 513));

        jTitle.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jTitle.setForeground(new java.awt.Color(102, 102, 102));
        jTitle.setText("Symétrie du papillon :");

        jDurée.setModel(new javax.swing.SpinnerNumberModel(1, 1, 15, 1));
        jDurée.setToolTipText("Durée de la série (en mn)");
        jDurée.setOpaque(false);
        jDurée.setPreferredSize(new java.awt.Dimension(35, 20));
        jDurée.setValue(1);

        jManualStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jManualStart.setText("Démarrer");
        jManualStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jManualStartActionPerformed(evt);
            }
        });

        jAutoStar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jAutoStar.setText("Progression auto");
        jAutoStar.setEnabled(false);
        jAutoStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoStarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Durée de présentation :");

        jPresent.setModel(new javax.swing.SpinnerNumberModel(2000, 500, 5000, 250));
        jPresent.setOpaque(false);

        jGridSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 3 x 3", " 4 x 4", " 5 x 5" }));
        jGridSize.setToolTipText("Taille de la grille");

        jLabel12.setText("(1 à 15 minutes)");
        jLabel12.setEnabled(false);

        jLabelGrid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelGrid.setText("Taille Grille :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Durée de la série :");

        jLabel13.setText("(ms)");
        jLabel13.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jManualStart)
                .addGap(26, 26, 26)
                .addComponent(jAutoStar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelGrid)
                                            .addComponent(jLabel5))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator4))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTitle)
                .addGap(36, 36, 36)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGrid))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(24, 24, 24)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(21, 21, 21)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jManualStart)
                    .addComponent(jAutoStar))
                .addContainerGap(196, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jManualStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jManualStartActionPerformed
        int size = (Integer) jGridSize.getSelectedIndex() +3 ;
        int present   = (Integer) jPresent.getValue() ;
        int durée =  (Integer) jDurée.getValue() ;
        //on lance l'activité
        OrthoVS.fen.enableMenuBar(false);
        //OrthoVS.fen.setExtendedState(OrthoVS.fen.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        //OrthoVS.fen.repaint () ;
        
        LaunchSymetry l = new LaunchSymetry (this, size, durée, present) ;
    }//GEN-LAST:event_jManualStartActionPerformed

    private void jAutoStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoStarActionPerformed
        /*int n = (Integer) spinNbCycles.getValue();
        int sp   = Integer.parseInt((String) jSpeed.getSelectedItem());
        //on lance l'activité
        LaunchFixation test = new LaunchFixation ( n, sp, jManuel.isSelected(), true ) ;
        test.start () ;*/
    }//GEN-LAST:event_jAutoStarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAutoStar;
    public static javax.swing.JSpinner jDurée;
    private javax.swing.JComboBox<String> jGridSize;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JButton jManualStart;
    public static javax.swing.JSpinner jPresent;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public static javax.swing.JLabel jTitle;
    // End of variables declaration//GEN-END:variables
}

class LaunchSymetry extends Thread {
    
    Thread t ;    
    JPanel p ;
    int size, durée, present ;
    JProgressBar progressBar ;
    JButton jTime, jButterfly ;
    
    LaunchSymetry (JPanel p, int size, int durée, int present) {
        this.p = p ;
        this.size = size ;
        this.durée = durée * 60 ;
        this.present = present ;
        //On cache les menus
        //OrthoVS.fen.enableMenuBar(false);
        OrthoVS.fen.setExtendedState(OrthoVS.fen.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        OrthoVS.fen.jPatient.setVisible (false) ;
        OrthoVS.fen.symetryParam.setVisible(false);
        OrthoVS.fen.validate () ;
        //OrthoVS.fen.chartPanelOK.setVisible(false);
        
        //ProgressBar
        progressBar = new JProgressBar();
        progressBar.setMaximum(this.durée);
        progressBar.setValue(0);
        OrthoVS.fen.getContentPane().add (progressBar) ;
        progressBar.setOpaque(false);
        progressBar.setForeground(Color.PINK);
       
        //Icon time
        jTime = new JButton ( UserInfo.iconTime ) ;
        jTime.setBorderPainted(false);
        jTime.setContentAreaFilled(false);
        OrthoVS.fen.getContentPane ().add (jTime) ;
        jTime.setVisible(true);
        //Icon monkey
        jButterfly = new JButton ( UserInfo.iconButterfly ) ;
        jButterfly.setBorderPainted(false);
        jButterfly.setContentAreaFilled(false);
        OrthoVS.fen.getContentPane ().add (jButterfly) ;
        jButterfly.setBounds(OrthoVS.fen.getContentPane().getWidth()-260 , 10 , 256, 256);
        jButterfly.setVisible(true);
        
        //On lance le thread
        t = new Thread (this, "launchSymetry") ;
        t.start ( ) ;
    }
    
    @Override
    public void run () {
        
        //On boucle sur la série
        boolean notFin = true ;
        long tempsDebut = System.currentTimeMillis();
        //On positionne les éléments
        
        GrilleSymetry grille = new GrilleSymetry (4, 3, false) ;
        
        OrthoVS.fen.getContentPane().add (grille) ;
        grille.validate () ;
        grille.addKeyListener(grille);
        //On positionne les éléments
        progressBar.setBounds(grille.getX(), grille.getY()-50, grille.getWidth(), 20);
        jTime.setBounds(grille.getX() - 35 , grille.getY()-56, 32, 32);
        //On redessine
        OrthoVS.fen.repaint () ;
        grille.requestFocusInWindow();
        //On lance le timer
        DrawTimer timerThrd = new DrawTimer (progressBar, tempsDebut, this.durée) ;
        
        do {
            
            //On laisse un peu passer le temps...
            try { sleep ( 250 ) ;} catch (Exception e) {}
            //Si ESC on sort
            if (grille.out) notFin = false ;
            //On reprend le focus pour la touche ESC
            grille.requestFocusInWindow();
            
            //C'est la fin ?
            float seconds = (System.currentTimeMillis() - tempsDebut) / 1000F;
            //progressBar.setValue((int) seconds);
            if (seconds > durée) notFin = false ;
        } while (notFin) ;
       
        //On réaffiche les paramètres
        OrthoVS.fen.getContentPane().remove(grille);
        OrthoVS.fen.getContentPane().remove(progressBar);
        OrthoVS.fen.getContentPane().remove(jTime);
        OrthoVS.fen.getContentPane().remove(jButterfly);
        OrthoVS.fen.enableMenuBar(true);
        OrthoVS.fen.jPatient.setVisible (true) ;
        p.setVisible (true) ;
        OrthoVS.fen.setExtendedState(JFrame.NORMAL);
        OrthoVS.fen.repaint () ;
    }
}

class GrilleSymetry extends JPanel implements ActionListener, KeyListener {
    
    //paramètres
    private boolean vertical ;
    //Pour sortir
    public boolean out = false ;
    //Cases
    MonkeyButton original[][] ;
    MonkeyButton mirror[][]   ;
    
    //Constructor
    GrilleSymetry (int i, int j, boolean vertical) {
        //Paramètres
        this.vertical = vertical ;
        //Taille du panel
        j =j * 2 ;
        if (vertical) {
            int t = i ;
            i = j ;
            j = t ;
        }
        setBounds((OrthoVS.fen.getContentPane().getWidth()-(i*100))/2, (OrthoVS.fen.getContentPane().getHeight()-(j*100))/2, i*100, j*100);
        //this.setOpaque(false);
        //setBackground(Color.CYAN);
        //Layout
        GridLayout g = new GridLayout(j, i) ;
        g.setHgap(6); g.setVgap(6);
        setLayout( g );
        setBorder(new EmptyBorder(10, 10, 10, 10) );
        
        //On crée les buttons
        original = new MonkeyButton [i][j] ;
        mirror = new MonkeyButton [i][j] ;
        for (int n=0; n<i; n++)
            for (int ii=0; ii<j; ii++) {
                original[n][ii] = new MonkeyButton (n, ii) ;
                original[n][ii].setFont(new Font("Arial", Font.PLAIN, 36));
                original[n][ii].setForeground(Color.GRAY);
                original[n][ii].setVisible(true);
                original[n][ii].addActionListener(this);
                add (original[n][ii]) ;
            }
        
        //On affiche
        setVisible (true) ;
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (vertical) 
            g.drawLine (this.getWidth()/2, 0, this.getWidth()/2, this.getHeight()) ;
        else
            g.drawLine (0, this.getHeight()/2, this.getWidth(), this.getHeight()/2) ;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int code = e.getKeyCode () ;
        if (code == VK_ESCAPE) {    //Sortir de la boucle de test, revenir à l'écran de paramétrage
            out = true ;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}