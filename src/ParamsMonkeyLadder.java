
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_ESCAPE;
import java.awt.event.KeyListener;
import java.awt.image.MemoryImageSource;
import static java.lang.Thread.sleep;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Fred
 */
public class ParamsMonkeyLadder extends javax.swing.JPanel {

    /**
     * Creates new form ParamsSaccade
     */
    JLabel icone ;
    public ParamsMonkeyLadder(JLabel icone) {
        initComponents();
        this.icone = icone ;
        if (OrthoVS.user.nom != null) {
            jGridSize.setEnabled (true) ;
            jDurée.setEnabled (true) ;
            jDurée.setValue (3) ;
            jGridSize.setSelectedIndex(1);
            //jLabelGrid.setEnabled (true) ;
            //jGridSize.setSelectedIndex(1);
        }
        else {
            jGridSize.setSelectedIndex(1);
            jGridSize.setEnabled (false) ;
            //jLabelGrid.setEnabled (false) ;
            jGridSize.setSelectedIndex(1);
            jDurée.setEnabled (false) ;
            jDurée.setValue (1) ;
        }
        addComponentListener ( new ComponentAdapter () {
            public void componentShown ( ComponentEvent e )
            {
                icone.setVisible(true);
            }

            public void componentHidden ( ComponentEvent e )
            {
                icone.setVisible(false);
            }
        } );    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTitle = new javax.swing.JLabel();
        jDurée = new javax.swing.JSpinner();
        jSeparator2 = new javax.swing.JSeparator();
        jManualStart = new javax.swing.JButton();
        jAutoStar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jPresent = new javax.swing.JSpinner();
        jGridSize = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        jLabelGrid = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(255, 255, 255));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(431, 513));

        jTitle.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jTitle.setForeground(new java.awt.Color(102, 102, 102));
        jTitle.setText("Echelle de Singe :");

        jDurée.setModel(new javax.swing.SpinnerNumberModel(1, 1, 15, 1));
        jDurée.setToolTipText("Durée de la série (en mn)");
        jDurée.setOpaque(false);
        jDurée.setPreferredSize(new java.awt.Dimension(35, 20));
        jDurée.setValue(1);

        jManualStart.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jManualStart.setText("Démarrer");
        jManualStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jManualStartActionPerformed(evt);
            }
        });

        jAutoStar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jAutoStar.setText("Progression auto");
        jAutoStar.setEnabled(false);
        jAutoStar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAutoStarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Durée de présentation :");

        jPresent.setModel(new javax.swing.SpinnerNumberModel(2000, 500, 5000, 250));
        jPresent.setOpaque(false);

        jGridSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " 3 x 3", " 4 x 4", " 5 x 5" }));
        jGridSize.setToolTipText("Taille de la grille");

        jLabel12.setText("(1 à 15 minutes)");
        jLabel12.setEnabled(false);

        jLabelGrid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelGrid.setText("Taille Grille :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setText("Durée de la série :");

        jLabel13.setText("(ms)");
        jLabel13.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jManualStart)
                .addGap(26, 26, 26)
                .addComponent(jAutoStar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jTitle)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelGrid)
                                            .addComponent(jLabel5))
                                        .addGap(47, 47, 47)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel12)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator3)
                            .addComponent(jSeparator4))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTitle)
                .addGap(36, 36, 36)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jGridSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelGrid))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jDurée, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(24, 24, 24)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jPresent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(21, 21, 21)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jManualStart)
                    .addComponent(jAutoStar))
                .addContainerGap(196, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jManualStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jManualStartActionPerformed
        int size = (Integer) jGridSize.getSelectedIndex() +3 ;
        int present   = (Integer) jPresent.getValue() ;
        int durée =  (Integer) jDurée.getValue() ;
        //on lance l'activité
        OrthoVS.fen.enableMenuBar(false);
        LaunchMonkeyLadder l = new LaunchMonkeyLadder (this, size, durée, present) ;
    }//GEN-LAST:event_jManualStartActionPerformed

    private void jAutoStarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAutoStarActionPerformed
        /*int n = (Integer) spinNbCycles.getValue();
        int sp   = Integer.parseInt((String) jSpeed.getSelectedItem());
        //on lance l'activité
        LaunchFixation test = new LaunchFixation ( n, sp, jManuel.isSelected(), true ) ;
        test.start () ;*/
    }//GEN-LAST:event_jAutoStarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAutoStar;
    public static javax.swing.JSpinner jDurée;
    private javax.swing.JComboBox<String> jGridSize;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel5;
    public static javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelGrid;
    private javax.swing.JButton jManualStart;
    public static javax.swing.JSpinner jPresent;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    public static javax.swing.JLabel jTitle;
    // End of variables declaration//GEN-END:variables
}

class LaunchMonkeyLadder extends Thread {
    
    Thread t ;    
    JPanel p ;
    int size, durée, present ;
    JProgressBar progressBar ;
    JButton jTime, jMonkey ;
    JLabel jScore ;
    XYSeries serieBAD ;
    
    LaunchMonkeyLadder (JPanel p, int size, int durée, int present) {
        this.p = p ;
        this.size = size ;
        this.durée = durée * 60 ;
        this.present = present ;
        //On cache les menus
        //OrthoVS.fen.enableMenuBar(false);
        OrthoVS.fen.setExtendedState(OrthoVS.fen.getExtendedState() | JFrame.MAXIMIZED_BOTH);
        OrthoVS.fen.jPatient.setVisible (false) ;
        OrthoVS.fen.chartPanelOK.setVisible(false);
        OrthoVS.fen.validate () ;
        //ProgressBar
        progressBar = new JProgressBar();
        progressBar.setMaximum(this.durée);
        progressBar.setValue(0);
        OrthoVS.fen.getContentPane().add (progressBar) ;
        /*Border border = BorderFactory.createTitledBorder("Reste...");
        progressBar.setBorder(border);*/
        progressBar.setOpaque(false);
        progressBar.setForeground(Color.PINK);
        //Icon time
        jTime = new JButton ( UserInfo.iconTime ) ;
        jTime.setBorderPainted(false);
        jTime.setContentAreaFilled(false);
        OrthoVS.fen.getContentPane ().add (jTime) ;
        jTime.setVisible(true);
        //Icon monkey
        jMonkey = new JButton ( UserInfo.iconMonkey ) ;
        jMonkey.setBorderPainted(false);
        jMonkey.setContentAreaFilled(false);
        jMonkey.setVisible(true);
        
        //Graphique
        OrthoVS.fen.xySeriesCollectionBAD = new XYSeriesCollection();
        JFreeChart chartBAD = ChartFactory.createXYLineChart("", "", "", OrthoVS.fen.xySeriesCollectionBAD,
            PlotOrientation.VERTICAL, false, false, false);
        
        chartBAD.removeLegend();
        OrthoVS.fen.chartPanelBAD = new ChartPanel( chartBAD ) ;
        OrthoVS.fen.getContentPane ().add (OrthoVS.fen.chartPanelBAD) ;
        XYPlot plot = (XYPlot) chartBAD.getPlot() ;
        XYLineAndShapeRenderer xyLineAndShapeRenderer = new XYLineAndShapeRenderer() ;
        xyLineAndShapeRenderer.setSeriesPaint(0, Color.YELLOW) ;
        plot.setRenderer(xyLineAndShapeRenderer);
        ValueAxis domain = plot.getDomainAxis() ; domain.setVisible(false);
        NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
        OrthoVS.fen.chartPanelBAD.setPopupMenu(null);
        OrthoVS.fen.chartPanelBAD.setDomainZoomable(false);
        OrthoVS.fen.chartPanelBAD.setRangeZoomable(false);
        OrthoVS.fen.chartPanelBAD.setVisible(true);
        chartBAD.setBackgroundPaint(new Color(0,204 , 204));
        //On initialise le tracé
        serieBAD = new XYSeries("% inversions");
        OrthoVS.fen.xySeriesCollectionBAD.addSeries(serieBAD);
        //Le score
        jScore = new JLabel ("1") ;
        OrthoVS.fen.getContentPane ().add (jScore) ;
        OrthoVS.fen.getContentPane ().add (jMonkey) ;
        jScore.setFont(new java.awt.Font("Tahoma", 1, 30));
        jScore.setForeground(Color.DARK_GRAY);
        //jScore.setOpaque(false);
        jScore.setVisible(true);
        
        //On lance le thread
        t = new Thread (this, "launchMonkeyLadder") ;
        t.start ( ) ;
    }
    
    @Override
    public void run () {
        //On prépare les données
        LinkedList<Score> results = new LinkedList<Score> () ;
        
        //On cache ce qu'il faut cacher
        p.setVisible (false);
        
        //On affiche ce dont on a besoin
        Cadre9x9 grille = new Cadre9x9 (size, size) ;
        OrthoVS.fen.getContentPane().add (grille) ;
        grille.validate () ;
        grille.addKeyListener(grille);
        grille.requestFocusInWindow();
        //La progressBar
        progressBar.setBounds(grille.getX(), grille.getY()-50, grille.getWidth(), 20);
        jTime.setBounds(grille.getX() - 35 , grille.getY()-56, 32, 32);
        jMonkey.setBounds(grille.getX() + grille.getWidth() + 20 , grille.getY() + grille.getHeight() - 330 , 260, 187);
        jScore.setBounds(jMonkey.getX() + 122, jMonkey.getY() + 150, 22, 25);
        OrthoVS.fen.chartPanelBAD.setBounds(grille.getX() + grille.getWidth() + 20, grille.getY() + grille.getHeight() - 120, 250, 120);
        //OrthoVS.fen.chartPanelBAD.setOpaque(false);
        //On redessine
        OrthoVS.fen.repaint () ;
        
        //On boucle sur la série
        boolean notFin = true ;
        long tempsDebut = System.currentTimeMillis();
        int currentEmpan = 1 ;
        int nCycle = 1 ;
        
        //On lance le timer
        DrawTimer timerThrd = new DrawTimer (progressBar, tempsDebut, this.durée) ;
        
        //On démarre
        do {
            Score score = new Score () ;
            //On affiche une grille
            if ( currentEmpan < (size * (size - 1) ) ) currentEmpan++ ;
            if (currentEmpan == 1) currentEmpan++ ;
            grille.randomInit( currentEmpan );
            score.level = currentEmpan ;
            //On montre
            try { sleep ( present ) ;} catch (Exception e) {}
            score.presentation = present ;
            //On cache
            grille.hideNumbers(score) ;
            //Saisie : on attend la fin
            do {
                try { sleep ( 150 ) ;} catch (Exception e) {}
                if (grille.out) break ;
            } while (! grille.next) ;
            
            //Si ESC on sort
            if (grille.out) break ;
            //On met à jour le graphique et le label score
            serieBAD.add (nCycle, score.reponse) ;
            jScore.setText(String.valueOf(score.reponse));
            //On laisse un peu la réponse...
            try { sleep ( 1000 ) ;} catch (Exception e) {}
            //On sauve le score
            results.add(score); 
            //On reprend le focus pour la touche ESC
            grille.requestFocusInWindow();
            //Si mauvaise réponse :
            if (score.level != score.reponse) currentEmpan = currentEmpan - 2 ;
            
            //C'est la fin ?
            float seconds = (System.currentTimeMillis() - tempsDebut) / 1000F;
            //progressBar.setValue((int) seconds);
            if (seconds > durée) notFin = false ;
            nCycle++ ;
        } while (notFin) ;
        if (results.size() > 0) {
            Session session = new Session () ;
            //ajouter la date
            session.date = new Date () ;
            //affecter les résultats
            session.gridSize = this.size ;
            session.results = results ;
            //On ajoute à l'ensemble des résultats
            UserInfo.resultatsMonkey.add(session);
            UserInfo.modifiedResultatsMonkey = true ;
        }
        
        //On réaffiche les paramètres
        OrthoVS.fen.getContentPane().remove(grille);
        OrthoVS.fen.getContentPane().remove(progressBar);
        OrthoVS.fen.getContentPane().remove(jTime);
        OrthoVS.fen.getContentPane().remove(jMonkey);
        OrthoVS.fen.getContentPane().remove(jScore);
        OrthoVS.fen.getContentPane().remove(OrthoVS.fen.chartPanelBAD);
        OrthoVS.fen.enableMenuBar(true);
        OrthoVS.fen.jPatient.setVisible (true) ;
        OrthoVS.fen.chartPanelOK.setVisible(true);
        OrthoVS.fen.computeChartsMonkey(true);
        p.setVisible (true) ;
        OrthoVS.fen.enableMenuBar(true);
        OrthoVS.fen.setExtendedState(JFrame.NORMAL);
        OrthoVS.fen.repaint () ;
    }
}

class Cadre9x9 extends JPanel implements ActionListener, KeyListener {
    
    int size, max, currentOrder, empan ;
    MonkeyButton j[][] ;
    public boolean next = false ;
    public boolean out = false ;
    boolean silence = true ;
    Score score ;
    long tempsDebut ;
    
    Cadre9x9 ( int size, int max) {
        this.size = size ;
        this.max = max ;
        
        setBounds((OrthoVS.fen.getContentPane().getWidth()-(size*100))/2, (OrthoVS.fen.getContentPane().getHeight()-(size*100))/2, size*100, size*100);
        setBackground(Color.CYAN);
        
        GridLayout g = new GridLayout(size, size) ;
        g.setHgap(6); g.setVgap(6);
        setLayout( g );
        setBorder(new EmptyBorder(10, 10, 10, 10) );
        //setBorder(BorderFactory.createEtchedBorder());
        j = new MonkeyButton [size][size] ;
        for (int i=0; i<size; i++)
            for (int ii=0; ii<size; ii++) {
                j[i][ii] = new MonkeyButton (i, ii) ;
                j[i][ii].setFont(new Font("Arial", Font.PLAIN, 36));
                j[i][ii].setForeground(Color.GRAY);
                j[i][ii].setVisible(false);
                j[i][ii].addActionListener(this);
                add (j[i][ii]) ;
            }
        //On affiche
        setVisible (true) ;
    }
    
    void randomInit (int empan) {
        this.empan = empan ;
        this.silence = true ;
        
        //On efface la grille
        setBackground(Color.CYAN);
        for (int i=0; i<size; i++)
            for (int ii=0; ii<size; ii++) {
                j[i][ii].setVisible(false);
                j[i][ii].removeActionListener(this);
                j[i][ii].order = 0 ;
            }
        //On génère une nouvelle grille
        Random rand = new Random () ;
        int min = 0 ;
        int max = this.size - 1 ;
        int i = 0 ;
        while (i < empan) {
            int rX = rand.nextInt((max - min) + 1) + min;
            int rY = rand.nextInt((max - min) + 1) + min;
            if ( ! j[rX][rY].isVisible() ) {
                j[rX][rY].setText(String.valueOf(i+1));
                j[rX][rY].setVisible(true);
                j[rX][rY].setForeground(Color.GRAY);
                j[rX][rY].setFocusable(false);
                j[rX][rY].setFocusPainted(false);
                j[rX][rY].setBorderPainted(false);
                i++ ;
                j[rX][rY].order = i ;
            } 
        }   
        //On cache le curseur
        int[] pixels = new int[16 * 16];
        Image image = Toolkit.getDefaultToolkit().createImage(
        new MemoryImageSource(16, 16, pixels, 0, 16));
        Cursor transparentCursor = Toolkit.getDefaultToolkit().createCustomCursor(
        image, new Point(0, 0), "invisibleCursor");
        this.setCursor(transparentCursor);
    }
    
    void hideNumbers (Score score) {
        this.score = score ;
        for (int i=0; i<size; i++)
            for (int ii=0; ii<size; ii++) {
                j[i][ii].setText("");
                //j[i][ii].setBackground(Color.WHITE);
                j[i][ii].addActionListener(this);
                j[i][ii].setBorderPainted(true);
            }
        //On peut remettre la souris
        setCursor(Cursor.getDefaultCursor());
        
        //On initialise la saisie
        try { sleep ( 150 ) ;} catch (Exception e) {}
        tempsDebut = System.currentTimeMillis();
        this.currentOrder = 1 ;
        this.next = false ;
        this.silence = false ;
    }
    static SoundClips snd ;
    
    @Override
    public void actionPerformed(ActionEvent e) {
        if (this.silence) return ;
        Object source = e.getSource () ;
        MonkeyButton j = (MonkeyButton) source ;
        if (j.order == 0) return ;
        //System.out.println ( j.getText() ) ;
        j.setForeground(Color.GREEN);
        j.setText ( String.valueOf (j.order) ) ;
        //Premier clic ?
        if (currentOrder == 1) this.score.tr_i = System.currentTimeMillis() - tempsDebut ;
        //Temps total de réponse
        this.score.tr_f = System.currentTimeMillis() - tempsDebut ;
        //On vérifie l'ordre de saisie...
        if (! (currentOrder  == j.order) ) { //c'est faux...
            //Son
            this.silence= true ;
            snd = new SoundClips (5) ; //bad
            snd.start () ;
            j.setForeground(Color.RED);
            //Il faudrait afficher la suite aussi en rouge...
            j.getParent().setBackground(Color.RED);
            //On indique au thread maître que l'on a fini
            this.next = true ;
        }
        else {
            currentOrder ++ ;
            j.setForeground(Color.GREEN);
            j.order = 0 ;
        }
        //C'est la fin ?
        this.score.reponse = currentOrder - 1 ;
        if (currentOrder > this.empan) {//oui et c'est juste alors !
            snd = new SoundClips (4) ; //GOOD
            snd.start () ;
            j.getParent().setBackground(Color.GREEN);
            this.next = true ;
        }
    }

    @Override
    public void keyTyped(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (this.silence) return ;
        int code = e.getKeyCode () ;
        if (code == VK_ESCAPE) {    //Sortir de la boucle de test, revenir à l'écran de paramétrage
            out = true ;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}

class MonkeyButton extends JButton {
    Point p ;
    public int order = 0 ;
    
    MonkeyButton (int x, int y) {
        p = new Point (x, y) ;
    }
}